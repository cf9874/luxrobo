import styles from "./Layout.module.scss"
import { useRouter } from "next/router"
import {
  BarcodeOutlined,
  BellOutlined,
  CloseOutlined,
  // EditOutlined,
  QuestionCircleOutlined,
  ReconciliationOutlined,
  RightOutlined,
  UserOutlined,
} from "@ant-design/icons"
import Head from "next/head"
import { useAppSelector, useAsyncEffect } from "hooks"
import { Col, Row, Space } from "antd"
import { shallowEqual } from "react-redux"
import { apiManager, apiUtil } from "apis"
import Image from "next/image"
import { useState } from "react"
import { AlarmDto } from "apis/dto"
import { PROJECT_ALARM } from "@const/alarm.const"
import { DayUtil } from "utils/day.utils"
import { imgAsset } from "@assets/image"

export const Header = () => {
  const router = useRouter()
  const pathname = router.pathname.split("/")[1]
  const [alarmListState, setAlarmListState] = useState<AlarmDto[]>([])
  const [openAlarm, setOpenAlarm] = useState(false)
  const [openUserTab, setOpenUserTab] = useState(false)
  const { profile } = useAppSelector(state => state.profileReducer, shallowEqual)

  useAsyncEffect(async () => {
    const response = await apiManager.alarmApi.getList()
    if (apiUtil.isErrorResponse(response)) {
      alert(response.message)
      return
    }
    setAlarmListState(response.filter(list => list.is_checked === false).reverse())
  }, [openAlarm])

  const checkAlarm = async (AlarmID: number) => {
    const response = await apiManager.alarmApi.onAlarm(AlarmID)
    if (apiUtil.isErrorResponse(response)) {
      alert(response.message)
      return
    }
    setAlarmListState(list => list.filter(alarm => alarm.alarmID !== AlarmID))
  }
  const onLink = async (alarm: AlarmDto) => {
    switch (alarm.code) {
      case 1:
        void router.push(`/layout/${alarm.projectID}`)
        break
      case 2:
        void router.push(`/result/id/?id=${alarm.projectID}`)
        break

      default: // 3456 : ordermanage
        // void router.push(`/ordermanage/${orderID }`)
        void router.push(`/ordermanage/id/?id=${alarm.orderID + 1}`) //임시로 orderID +1
        break
    }
    await checkAlarm(alarm.alarmID)
  }
  return (
    <div className={styles.header_container}>
      <Head>
        <title>{pathname === "/" ? "Home" : pathname}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.header}>
        <div className={styles.title_box}>
          <div className={styles.app_title} onClick={() => void router.push("/workspace")}>
            <Image src={imgAsset.modiLogo} width={235} height={35} alt="logo" />
          </div>
          {/* <div className={styles.project_title}>Project Name- 230908</div> */}
          {/* <EditOutlined className={styles.project_status} /> */}
        </div>
        <div className={styles.header_menu}>
          {openAlarm ? (
            <Space className={styles.notice_modal_main} direction="vertical" size={0}>
              {alarmListState.length > 0 ? (
                alarmListState.map(alarm => {
                  return (
                    <Col key={alarm.alarmID}>
                      <Row
                        className={styles.notice_list_item_wrapper}
                        onClick={async () => {
                          await onLink(alarm)
                        }}
                      >
                        <Col className={styles.notice_list_item}>
                          <Row className={styles.notice_title}>{alarm.project_name}</Row>
                          <Row className={styles.notice_content_box}>
                            <Col className={styles.notice_content}>{PROJECT_ALARM[alarm.code].kor}</Col>
                            <Col className={styles.delete_notice_button}>
                              <CloseOutlined onClick={() => checkAlarm(alarm.alarmID)} />
                            </Col>
                          </Row>
                          <Row className={styles.notice_timestamp}>{DayUtil.diff(alarm.created_at)}</Row>
                        </Col>
                      </Row>
                      <div className={styles.notice_divider} />
                    </Col>
                  )
                })
              ) : (
                <Col className={styles.empty_alarm}>
                  <div className={styles.empty_alarm_text}>알람이 없습니다.</div>
                </Col>
              )}
            </Space>
          ) : null}
          {openUserTab ? (
            <Space className={styles.profile_modal_main} direction="vertical" size={0}>
              <Row
                className={styles.user_info_wrapper}
                onClick={() => {
                  void router.push("/workspace/personal/setting")
                }}
              >
                <div
                  style={{
                    width: "75px",
                    height: "75px",
                    overflow: "hidden",
                    borderRadius: "50%",
                    border: "1px solid #1b3852",
                  }}
                >
                  <Image
                    unoptimized={true}
                    src={process.env.NEXT_PUBLIC_FGB_S3_URL + profile.profile_image}
                    alt="Selected"
                    width={75}
                    height={75}
                    layout="responsive"
                    objectFit="cover"
                  />
                </div>
                <Col className={styles.user_info_box}>
                  <Row className={styles.user_info_username}>{profile.username}</Row>
                  <Row className={styles.user_info_user_email}>{profile.email}</Row>
                </Col>
                <Col className={styles.icon_to_move}>
                  <RightOutlined />
                </Col>
              </Row>
              <Row className={styles.profile_menu_wrapper}>
                <Col
                  className={styles.profile_menu_box}
                  onClick={() => {
                    void router.push("/workspace/personal/projects")
                  }}
                >
                  <Row className={styles.profile_menu}>
                    <ReconciliationOutlined className={styles.profile_menu_icon} />
                    <span className={styles.profile_menu_text}>Workspace</span>
                  </Row>
                </Col>
                <Col className={styles.profile_menu_box}>
                  <Row
                    className={styles.profile_menu}
                    onClick={() => {
                      void router.push("/ordermanage")
                    }}
                  >
                    <BarcodeOutlined className={styles.profile_menu_icon} />
                    <span className={styles.profile_menu_text}>Order Manage</span>
                  </Row>
                </Col>
                <Col className={styles.profile_menu_box}>
                  <Row
                    className={styles.profile_menu}
                    onClick={() => {
                      void router.push("/support/notice")
                    }}
                  >
                    <QuestionCircleOutlined className={styles.profile_menu_icon} />
                    <span className={styles.profile_menu_text}>Support</span>
                  </Row>
                </Col>
              </Row>
              <Row
                className={styles.logout_wrapper}
                onClick={() => {
                  apiUtil.removeUserData()
                  void router.push("/member/signin")
                }}
              >
                <Col className={styles.logout}>Log out</Col>
              </Row>
            </Space>
          ) : null}
          <BellOutlined
            className={styles.notice_icon}
            onClick={() => {
              setOpenAlarm(state => !state)
              setOpenUserTab(false)
            }}
          />
          <UserOutlined
            className={styles.profile_icon}
            onClick={() => {
              setOpenUserTab(state => !state)
              setOpenAlarm(false)
            }}
          />
        </div>
      </div>
    </div>
  )
}
